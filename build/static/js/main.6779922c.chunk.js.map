{"version":3,"sources":["serviceWorker.ts","index.tsx","App.tsx"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","data","require","className","rel","href","target","Map","center","zoom","zoomControl","ZoomControl","position","TileLayer","attribution","url","LayerGroup","map","e","CircleMarker","coords","lat","lng","fillColor","color","radius","Math","log","cases","Popup","region","deads","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4iCAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCKD,WAEb,IAAMC,EAAqBC,EAAQ,IACnC,OACE,oCACE,yBAAKC,UAAU,iBACb,2EACA,yCAAc,uBAAGC,IAAI,sBAAsBC,KAAK,2CAA2CC,OAAO,UAApF,yBACd,6CAAkB,uBAAGF,IAAI,sBAAsBE,OAAO,SAASD,KAAK,6CAAlD,mBAEpB,yBAAKF,UAAU,gBACb,kBAACI,EAAA,EAAD,CAAKC,OAAQ,CAAC,KAAO,MAAQC,KAAM,EAAGC,aAAa,GACnD,kBAACC,EAAA,EAAD,CAAaC,SAAS,eACpB,kBAACC,EAAA,EAAD,CACEC,YAAY,0EACZC,IAAI,uDAEN,kBAACC,EAAA,EAAD,KACGf,EAAKgB,KAAI,SAAAC,GAAC,OACT,kBAACC,EAAA,EAAD,CAAcX,OAAQ,CAACU,EAAEE,OAAOC,IAAKH,EAAEE,OAAOE,KAAMC,UAAU,MAAMC,MAAM,MAAMC,OAA6B,EAApBC,KAAKC,IAAIT,EAAEU,OAAc,GAChH,kBAACC,EAAA,EAAD,KAAO,4BAAKX,EAAEY,QAAY,yCAA1B,IAAkDZ,EAAEU,MAApD,IAA2D,6BAAM,0CAAjE,IAA0FV,EAAEa,iBDzB5F,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6779922c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { Map, TileLayer, CircleMarker, Popup, ZoomControl, LayerGroup } from \"react-leaflet\";\nimport \"./App.css\";\n\ninterface DataMarker {\n  \"region\": string;\n  \"coords\": { \"lat\": number, \"lng\": number };\n  \"cases\": number;\n  \"deads\": number;\n}\n\nexport default function App() {\n\n  const data: DataMarker[] = require('./data.json');\n  return (\n    <>\n      <div className=\"ideaContainer\">\n        <h3>COVID19 Italia: 25 febbraio 2020, ore 18.00</h3>\n        <p>Un'idea di <a rel=\"noopener noreferrer\" href=\"https://napolux.com?utm_source=coronamap\" target=\"_blank\">Francesco Napoletano</a></p>\n        <p>Sorgente dati: <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"http://www.salute.gov.it/nuovocoronavirus\">salute.gov.it</a></p>\n      </div>\n      <div className=\"mapContainer\">\n        <Map center={[41.90, 12.50]} zoom={5} zoomControl={false}>\n        <ZoomControl position=\"bottomleft\" />\n          <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          <LayerGroup>\n            {data.map(e => (\n              <CircleMarker center={[e.coords.lat, e.coords.lng]} fillColor=\"red\" color=\"red\" radius={(Math.log(e.cases) * 5) + 5}>\n                <Popup><h3>{e.region}</h3><strong>Casi:</strong> {e.cases} <br /><strong>Morti:</strong> {e.deads}</Popup>\n              </CircleMarker>\n            ))}\n          </LayerGroup>\n        </Map>\n      </div>\n    </>);\n}\n\n"],"sourceRoot":""}